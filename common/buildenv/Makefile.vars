# Various global variables
OUT_DIR := out
OUT_SRC := src-out
CACHE := cache
PKGNAME := $(NAME)
MANIFEST_FILE := $(shell pwd)/MANIFEST
CACHE_DIR := $(shell pwd)/$(CACHE)/

ifneq (,$(findstring deb,$(MAKECMDGOALS)))
ARCH ?= $(shell dpkg --print-architecture)
else
ARCH ?= $(shell uname -m)
endif

# Default Config Values
# ----------------------------------------------------------------------------
# Maintainer Information
MAINTAINER       ?= anonymous
MAINTAINER_EMAIL ?= anonymous@dev
# Package Origin Configuration
PKG_ORG ?= amk
PKG_ORIGIN ?= anonymous@dev
GPG_KEY ?=
# Repository Settings
DEB_REPO_COMPONENT ?= main

# Repositories
UBU_MIRROR ?= https://archive.ubuntu.com/ubuntu/
DEB_MIRROR ?= https://ftp.debian.org/debian/

# Debian Repository Configuration - only for deb targets
define DEB_REPO_CONFIG
Origin: $(PKG_ORIGIN)
Label: $(PKG_ORIGIN)
Suite: $(DIST)
Codename: $(DIST)
Version: 3.1
Architectures: $(ARCH)
Components: $(DEB_REPO_COMPONENT)
Description: Repository containing misc packages
SignWith: $(GPG_KEY)
endef

export DEB_REPO_CONFIG

# Build Directory Structure
# ----------------------------------------------------------------------------
BUILD_DIR := builddir/$(ARCH)

# Success/Failure Markers
SUCCESS_MARKER := success.$(ARCH)
FAILURE_MARKER := failure.$(ARCH)

# Detect build environment directory
BUILDENV_DIR := $(shell \
  if [ -f ./buildenv/get_dist.sh ]; then echo ./buildenv; \
  elif [ -f ./common/buildenv/get_dist.sh ]; then echo ./common/buildenv; fi \
)

REPO_BASE_DIR := $(shell \
  if [ -f ./buildenv/get_dist.sh ]; then echo "../";fi \
)

ifeq ("$(DIST)", "")
  DIST := unknown
endif

DIST_OS := $(shell echo $(DIST) | sed 's/-backports//')
DIST_TAG  := $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 1)
DIST_CODE := $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 2)
DIST_FULL := $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 3)

# Repository Paths
DEB_OUT_DIR := $(shell readlink -f $(REPO_BASE_DIR)$(OUT_DIR))/deb.$(DIST).$(ARCH)
RPM_OUT_DIR := $(shell readlink -f $(REPO_BASE_DIR)$(OUT_DIR))/rpm.$(DIST).$(ARCH)
LOCAL_REPO_PATH := $(DEB_OUT_DIR)/raw
RPM_LOCAL_REPO_PATH := $(RPM_OUT_DIR)/raw

# Individual Package Repository Paths
INDIVIDUAL_DEB_OUT_DIR := $(shell readlink -f $(REPO_BASE_DIR)$(OUT_DIR))/deb.$(DIST).$(ARCH)
INDIVIDUAL_DEB_LOCAL_REPO_PATH := $(INDIVIDUAL_DEB_OUT_DIR)/raw
INDIVIDUAL_RPM_OUT_DIR := $(shell readlink -f $(REPO_BASE_DIR)$(OUT_DIR))/rpm.$(DIST).$(ARCH)
INDIVIDUAL_RPM_LOCAL_REPO_PATH := $(INDIVIDUAL_RPM_OUT_DIR)/raw

# If rebuilding Manifest, run with -c
ifeq ($(MAKECMDGOALS), manifest)
BUILD_CHECKSUM_OPTION := -c
endif

# Helpers to recover source archive or git, cache it, and store a checksum of it
WGS := $(BUILDENV_DIR)/wget_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)" $(BUILD_CHECKSUM_OPTION)
GS := $(BUILDENV_DIR)/git_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)" $(BUILD_CHECKSUM_OPTION)

# Some variables for cowbuilder
COW_DIR := /var/cache/pbuilder/
ifneq ("$(DIST)", "unknown")
  COW_DIST := --distribution $(DIST_OS)
endif

ifeq ($(shell id -u), 1)
  SUDO :=
else
  SUDO := sudo
endif

ifeq ("$(COW_NAME)", "")
  COW_NAME := $(DIST).$(ARCH).cow
endif

ifeq ("$(DIST_CODE)", "ubu")
  COW_UBUNTU := --components "main universe multiverse"
  _MIRROR := $(UBU_MIRROR)
else
  _MIRROR := $(DEB_MIRROR)
endif

ifneq ("$(DIST)", "sid")
OTHERMIRROR := deb $(DEB_MIRROR) $(DIST_OS)-backports main
endif

ifneq ("$(OTHERMIRROR)", "")
OTHERMIRROR := $(OTHERMIRROR)|
endif

OTHERMIRROR := $(OTHERMIRROR)deb [trusted=yes] file://$(INDIVIDUAL_DEB_LOCAL_REPO_PATH) /
BINDMOUNT := --bindmounts "$(INDIVIDUAL_DEB_LOCAL_REPO_PATH)"
OTHERMIRROR := --othermirror "$(OTHERMIRROR)"


ifneq ("$(SKIP)", "")
# Parse the skip string to get if this specific dist/version combo must be ignored
TO_SKIP := $(shell $(BUILDENV_DIR)/skip_flag.sh -i "$(SKIP)" -d "$(DIST_CODE)" -v "$(DIST_TAG)")
endif

ifneq ("$(shell echo "$(MAKECMDGOALS)" | grep "rpm")", "")
MOCK_VERSION := $(shell mock --version)

MOCK_CMD=$(SUDO) mock \
    	-r $(DIST_FULL)-$(ARCH) \
		--configdir /etc/mock/ \
    	--localrepo "$(INDIVIDUAL_RPM_LOCAL_REPO_PATH)/" \
    	--chain $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)/SRPMS/*$(VERSION)-$(RELEASE)*.rpm

CMP_VERSION := $(shell \
	[ -e "$(BUILDENV_DIR)/compare_version.sh" ] && echo "$(BUILDENV_DIR)/compare_version.sh"; \
)

endif

# Package information
SOURCE_DIR := $(BUILD_DIR)/$(PKGNAME)-$(VERSION)
SOURCE_ARCHIVE := $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz

# Source archive creation command
SOURCE_TAR_CMD := cd $$(dirname $(SOURCE_DIR)) && \
    tar -zcf $(PKGNAME)_$(VERSION).orig.tar.gz \
        $$(basename $(SOURCE_DIR)) --owner=root --group=root && \
    rm -r $$(basename $(SOURCE_DIR))/* || \
    (rm -f $(PKGNAME)_$(VERSION).orig.tar.gz && \
    touch $(PKGNAME)_$(VERSION).orig.tar.gz)

# Create required directories
DIRECTORIES := $(BUILD_DIR) $(OUT_DIR) $(OUT_SRC) $(CACHE) \
    $(BUILD_DIR)/deb.$(DIST) $(SOURCE_DIR) $(BUILD_DIR)/rpm.$(DIST)

UPDATE_REPO ?= true
