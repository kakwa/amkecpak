# vim: set noet ts=4:

include buildenv/Makefile.vars
# Name of the root directory of the archive
SOURCE_DIR := $(BUILD_DIR)/$(PKGNAME)-$(VERSION)
# Name of the source archive
SOURCE_ARCHIVE := $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz
# Command used to build the source archive
SOURCE_TAR_CMD := cd `dirname $(SOURCE_DIR)` &&\
  tar -zcf $(PKGNAME)_$(VERSION).orig.tar.gz \
  	`basename $(SOURCE_DIR)` --owner=root --group=root &&\
  rm -r `basename $(SOURCE_DIR)`/* || \
  rm -f $(PKGNAME)_$(VERSION).orig.tar.gz; \
  touch $(PKGNAME)_$(VERSION).orig.tar.gz

# Some targets
DIRECTORIES := $(BUILD_DIR) $(OUT_DIR) $(OUT_SRC) $(CACHE) \
  $(BUILD_DIR)/deb.$(DIST) $(SOURCE_DIR) $(BUILD_DIR)/rpm.$(DIST)

UPDATE_REPO := true

include buildenv/Makefile.rpm
include buildenv/Makefile.deb

#### START common targets
all: deb rpm

# Create the build directories
$(DIRECTORIES):
	mkdir -p $(BUILD_DIR)
	mkdir -p $(OUT_DIR)
	mkdir -p $(OUT_SRC)
	mkdir -p $(CACHE)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)
	mkdir -p $(SOURCE_DIR)

# Cleaning targets
clean_build:
	if [ -d $(BUILD_DIR) ];\
	then chmod 700 -R $(BUILD_DIR);rm -rf $(BUILD_DIR);fi

clean_cache:
	if [ -d $(CACHE) ] && ! [ "$(KEEP_CACHE)" = "true" ];\
	then chmod 700 -R $(CACHE); rm -rf $(CACHE);fi

clean: clean_build clean_cache
	rm -f ../out/*/*/results/*/*$(NAME)*/success
	find $(OUT_DIR) -type f -name "*.rpm" -not -name "*.src.rpm" -printf "%f\0" | xargs -i -n 1 -0 find ../out/ -name {} -type f -delete
	find $(OUT_DIR) -type f -name "*.deb" -printf "%f\0" | xargs -i -n 1 -0 find ../out/ -name {} -type f -delete
	if [ -d $(OUT_DIR) ];\
	then chmod 700 -R $(OUT_DIR);rm -rf $(OUT_DIR);fi
	if [ -d $(OUT_SRC) ];\
	then chmod 700 -R $(OUT_SRC);rm -rf $(OUT_SRC);fi

# Build MANIFEST target
rm_manifest_file:
	if [ -f $(MANIFEST_FILE) ];\
	then  rm $(MANIFEST_FILE);fi
	touch MANIFEST

manifest: rm_manifest_file clean_cache $(SOURCE_ARCHIVE)

#### END common targets

#### START help target ####

define MAKE_HELP
Available targets:

* help       : Display this help


* manifest   : Download the upstream sources
               and (re)build the MANIFEST file
               with the checksum of the upstream sources.

               Running "make clean" is advisable before running
               "make manifest".


* clean      : Remove various work directories:
               - builddir/ (build directory),
               - cache/ (upstream sources cache directory),
               - out/ (output directory for packages),
               - src-out/ (output directory for source packages)

               It's possible to keep the cache directory
               with "KEEP_CACHE=true": "make clean KEEP_CACHE=true"


* deb        : Build the .deb packages


* rpm        : Build the .rpm packages


* deb_chroot : Build the .deb packages in a clean chroot (using cowbuilder)

               The targeted distribution version can be specified using
               the "DIST=<code name>", for example "make deb_chroot DIST=stretch"

               this target requires root permission for cowbuilder
               (sudo or run directly as root)


* rpm_chroot : Build the .rpm packages in a clean chroot (using mock) 

               The targeted distribution version can be specified using
               the "DIST=<code name>", for example "make rpm_chroot DIST=el7"

               this target requires root permission for mock
               (sudo or run directly as root)

* list_dist  : List distribution code names  

endef

export MAKE_HELP
help:
	@echo "$$MAKE_HELP"

.NOTPARALLEL: deb rpm clean deb_chroot manifest

.PHONY: all rpm_prepare rpm deb clean_build clean_cache \
  clean rm_manifest_file manifest deb_chroot help \
  deb_get_chroot_path rpm_chroot
