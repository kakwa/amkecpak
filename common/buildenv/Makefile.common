# vim: set noet ts=4:

include buildenv/Makefile.vars
include buildenv/Makefile.config

.NOTPARALLEL: deb rpm clean deb_chroot manifest

.PHONY: all rpm_prepare rpm deb clean_build clean_cache \
  clean rm_manifest_file manifest deb_chroot help \
  deb_get_chroot_path rpm_chroot list_dist

# Name of the root directory of the archive
SOURCE_DIR := $(BUILD_DIR)/$(PKGNAME)-$(VERSION)
# Name of the source archive
SOURCE_ARCHIVE := $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz
# Command used to build the source archive
SOURCE_TAR_CMD := cd `dirname $(SOURCE_DIR)` &&\
  tar -zcf $(PKGNAME)_$(VERSION).orig.tar.gz \
  	`basename $(SOURCE_DIR)` --owner=root --group=root &&\
  rm -r `basename $(SOURCE_DIR)`/* || \
  rm -f $(PKGNAME)_$(VERSION).orig.tar.gz; \
  touch $(PKGNAME)_$(VERSION).orig.tar.gz

# Some targets
DIRECTORIES := $(BUILD_DIR) $(OUT_DIR) $(OUT_SRC) $(CACHE) \
  $(BUILD_DIR)/deb.$(DIST) $(SOURCE_DIR) $(BUILD_DIR)/rpm.$(DIST)

UPDATE_REPO := true

#### START common targets

all: deb rpm

list_dist:
	@sed -e 's/  \(.*\).*/\1/;tx;d;:x' ./buildenv/get_dist.sh | grep -v echo | sed 's/\(.*\))/* \1/'

# Create the build directories
$(DIRECTORIES):
	mkdir -p $(BUILD_DIR)
	mkdir -p $(OUT_DIR)
	mkdir -p $(OUT_SRC)
	mkdir -p $(CACHE)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)
	mkdir -p $(SOURCE_DIR)

# Cleaning targets
clean_build:
	if [ -d $(BUILD_DIR) ];\
	then chmod 700 -R $(BUILD_DIR);rm -rf $(BUILD_DIR);fi

clean_cache:
	if [ -d $(CACHE) ] && ! [ "$(KEEP_CACHE)" = "true" ];\
	then chmod 700 -R $(CACHE); rm -rf $(CACHE);fi

clean: clean_build clean_cache
	rm -f ../out/*/*/results/*/*$(NAME)*/success
	find $(OUT_DIR) -type f -name "*.rpm" -not -name "*.src.rpm" -printf "%f\0" | xargs -i -n 1 -0 find ../out/ -name {} -type f -delete
	find $(OUT_DIR) -type f -name "*.deb" -printf "%f\0" | xargs -i -n 1 -0 find ../out/ -name {} -type f -delete
	if [ -d $(OUT_DIR) ];\
	then chmod 700 -R $(OUT_DIR);rm -rf $(OUT_DIR);fi
	if [ -d $(OUT_SRC) ];\
	then chmod 700 -R $(OUT_SRC);rm -rf $(OUT_SRC);fi

# Build MANIFEST target
rm_manifest_file:
	if [ -f $(MANIFEST_FILE) ];\
	then  rm $(MANIFEST_FILE);fi
	touch MANIFEST

manifest: rm_manifest_file clean_cache $(SOURCE_ARCHIVE)

#### END common targets

#### START DEB targets

# Some variables
DEB_CONTENT := $(BUILD_DIR)/debian/changelog \
  $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz

DEB_CONTENT_DIST := $(filter-out debian/control.dist.$(DIST) \
  debian/rules.dist.$(DIST), \
  $(wildcard debian/*.dist.$(DIST)) \
)

DEB_CONTENT_BASE := $(filter-out $(wildcard debian/*.dist.*) \
  debian/changelog \
  debian/control \
  debian/rules \
  debian/copyright, \
  $(wildcard debian/*) \
)

DEB_CONTENT_IN := $(DEB_CONTENT_DIST) \
  $(shell for f in $(DEB_CONTENT_BASE);\
    do \
      if ! [ -e $$f.dist.$(DIST) ];then echo $$f;fi; \
    done \
  )
DEB_CONTENT_OUT := $(subst .dist.$(DIST),,\
  $(addprefix $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/, \
    $(DEB_CONTENT_IN) \
  ) \
)

ifneq ("$(wildcard debian/rules.dist.$(DIST))","")
DEB_RULE_IN := debian/rules.dist.$(DIST)
else
DEB_RULE_IN := debian/rules
endif

ifneq ("$(wildcard debian/control.dist.$(DIST))","")
DEB_CONTROL_IN := debian/control.dist.$(DIST)
else
DEB_CONTROL_IN := debian/control
endif


ifneq ("$(wildcard debian/copyright.dist.$(DIST))","")
DEB_COPYRIGHT_IN := debian/copyright.dist.$(DIST)
else
DEB_COPYRIGHT_IN := debian/copyright
endif


DEB_ARCHIVE := $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)_$(VERSION).orig.tar.gz

DEB_PREPARE := $(DEB_ARCHIVE) $(DEB_CONTENT_OUT) \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/changelog \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/control \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/rules \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/copyright

DEB_CONTROL_RULE_COPYRIGHT := \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/control \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/rules \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/copyright

DEB_CHANGELOG := \
  $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/changelog

# Copy all the files of debian/ packaging directory
$(DEB_CONTENT_OUT): $(DEB_CONTENT_IN)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/
	f=$(subst $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/,,$@);\
	if [ -e $$f.dist.$(DIST) ];\
	then\
	    cp -r $$f.dist.$(DIST) $@;\
	else\
	    cp -r $$f $@;\
	fi

# Substitute version and package name in control file
$(DEB_CONTROL_RULE_COPYRIGHT): $(DEB_CONTROL_IN) $(DEB_RULE_IN) $(DEB_COPYRIGHT_IN) Makefile
	f=$(subst $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/,,$@);\
	if [ -e $$f.dist.$(DIST) ];\
	then\
	    cp -r $$f.dist.$(DIST) $@;\
	else\
	    cp -r $$f $@;\
	fi
	sed -i 's|@NAME@|$(PKGNAME)|'            $@ || (rm -f $@ ; exit 1)
	sed -i 's|@VERSION@|$(VERSION)|'         $@ || (rm -f $@ ; exit 1)
	sed -i 's|@LICENSE@|$(LICENSE)|'         $@ || (rm -f $@ ; exit 1)
	sed -i 's|@RELEASE@|$(RELEASE)|'         $@ || (rm -f $@ ; exit 1)
	sed -i 's|@DESCRIPTION@|$(DESCRIPTION)|' $@ || (rm -f $@ ; exit 1)
	sed -i 's|@SUMMARY@|$(SUMMARY)|'         $@ || (rm -f $@ ; exit 1)
	sed -i 's|@URL@|$(URL)|'                 $@ || (rm -f $@ ; exit 1)
	sed -i 's|@MAINTAINER@|$(MAINTAINER)|'   $@ || (rm -f $@ ; exit 1)
	sed -i 's|@MAINTAINER_EMAIL@|$(MAINTAINER_EMAIL)|' \
	    $@ || (rm -f $@ ; exit 1)

# Generate generic changelog
$(DEB_CHANGELOG): ./debian/changelog
	echo $(DIST_CODE) $(DIST_TAG)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian
	printf "$(PKGNAME) ($(VERSION)-$(RELEASE)~$(PKG_ORG)+$(DIST_CODE)$(DIST_TAG)) $(DIST); urgency=low\\n"  > $@
	printf "\\n  * New version\\n\\n" >> $@
	printf " -- $(MAINTAINER) <$(MAINTAINER_EMAIL)>  %s\\n" "Thu, 1 Jan 1970 00:00:00 +0000" >> $@

# put the archive in the proper directory
$(DEB_ARCHIVE): $(SOURCE_ARCHIVE) | $(DIRECTORIES)
	cp $(SOURCE_ARCHIVE) $(DEB_ARCHIVE)

$(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/Packages:
	mkdir -p $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)
	touch $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/Packages

# Build the deb(s) and put it in out directory
$(BUILD_DIR)/pkg_built.deb.$(DIST): $(DEB_PREPARE) | $(DIRECTORIES) $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/Packages
	tar -xf $(DEB_ARCHIVE) -C $(BUILD_DIR)/deb.$(DIST)
	cd $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION) && \
	dpkg-buildpackage -us -uc;\
	if [ $$? -ne 0 ];\
		then touch ../failure.$(DIST);exit 1;\
		else rm -f ../failure.$(DIST);\
	fi
	find $(BUILD_DIR)/ -type f -name "*.deb" -print0 | xargs -i -n 1 -0 mv {} $(OUT_DIR)/
	find $(BUILD_DIR)/ -type f -name "*.orig.tar.gz" -print0 | xargs -i -n 1 -0 cp {} $(OUT_SRC)/
	find $(BUILD_DIR)/ -type f -name "*.dsc" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(BUILD_DIR)/ -type f -name "*debian.tar.xz" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	touch $(BUILD_DIR)/pkg_built.deb.$(DIST)

# Build the deb(s) in a chroot (cowbuilder) and put it in out directory
$(BUILD_DIR)/pkg_built_chroot.deb.$(DIST): $(DEB_PREPARE) | $(DIRECTORIES) $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/Packages
	cowbuilder --help >/dev/null
	cd $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION) && \
	     dpkg-source -b ./
	if ! [ "$(SKIP_COWBUILDER_SETUP)" = "true" ];then\
	    flock -x /tmp/cowbuilder.$(DIST).lock -c '\
	    if ! [ -e $(COW_DIR)/$(COW_NAME) ];\
	    then\
	        export TMPDIR=/tmp/;\
		    $(SUDO) cowbuilder --create --debootstrap\
		        debootstrap $(COW_DIST) \
		        $(OTHERMIRROR) \
		        --basepath $(COW_DIR)/$(COW_NAME) \
		        --mirror $(DEB_MIRROR) \
		        $(BINDMOUNT) $(COW_UBUNTU) $(COW_OPTS);\
		    ret=$$?;\
	    else\
	        export TMPDIR=/tmp/;\
		$(SUDO) cowbuilder --update \
			--basepath $(COW_DIR)/$(COW_NAME) \
			$(BINDMOUNT); ret=$$?;\
	    fi ; exit $$ret;';\
	fi
	export TMPDIR=/tmp/;\
	  $(SUDO) cowbuilder --build \
	  	$(BUILD_DIR)/deb.$(DIST)/*.dsc  \
	  	--basepath $(COW_DIR)/$(COW_NAME) \
	  	--buildresult $(OUT_DIR)/ $(OTHERMIRROR) \
	  	--mirror $(DEB_MIRROR) $(BINDMOUNT); \
	if [ $$? -ne 0 ];\
		then touch $(BUILD_DIR)/failure.chroot.$(DIST);exit 1;\
		else rm -f $(BUILD_DIR)/failure.chroot.$(DIST);\
	fi
	find $(OUT_DIR)/ -type f -name "*.orig.tar.gz" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(OUT_DIR)/ -type f -name "*.dsc" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(OUT_DIR)/ -type f -name "*.changes" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(OUT_DIR)/ -type f -name "*.buildinfo" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(OUT_DIR)/ -type f -name "*debian.tar.xz" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(OUT_DIR) -type f -name "*$(DIST_CODE)$(DIST_TAG)*.deb" -print0 | xargs -i -n 1 -0 ln -f {} $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/
	if [ $(UPDATE_REPO) = "true" ];then cd $(INDIVIDUAL_DEB_LOCAL_REPO_PATH)/ && dpkg-scanpackages . >Packages && cd - ;fi
	touch $(BUILD_DIR)/pkg_built_chroot.deb.$(DIST)

deb_get_chroot_path:
	@echo `readlink -f $(COW_DIR)/$(COW_NAME)`


# If the build is not to be skipped
ifneq ($(TO_SKIP), true)
# The target to be called for building .deb in chroot
deb_chroot: $(BUILD_DIR)/pkg_built_chroot.deb.$(DIST)

# the target to be called for building .deb
deb: $(BUILD_DIR)/pkg_built.deb.$(DIST)

else
deb_chroot:
deb:
endif


#### END DEB targets

#### START RPM targets

# Some variables for rpm build
RPM_DIR := $(BUILD_DIR)/rpm.$(DIST)/BUILDROOT \
  $(BUILD_DIR)/rpm.$(DIST)/RPMS \
  $(BUILD_DIR)/rpm.$(DIST)/SRPMS \
  $(INDIVIDUAL_RPM_LOCAL_REPO_PATH)

RPM_SPEC := $(BUILD_DIR)/rpm.$(DIST)/SPEC/$(PKGNAME).spec

RPM_ARCHIVE := $(BUILD_DIR)/rpm.$(DIST)/SOURCES/$(PKGNAME)-$(VERSION).tar.gz

RPM_CONTENT_DIST := $(filter-out \
  rpm/component.spec.dist.$(DIST), \
  $(wildcard rpm/*.dist.$(DIST)) \
)

RPM_CONTENT_BASE := $(filter-out $(wildcard rpm/*.dist.*) \
  rpm/component.spec, \
  $(wildcard rpm/*) \
)
RPM_CONTENT_IN := $(RPM_CONTENT_DIST) \
  $(shell \
    for f in $(RPM_CONTENT_BASE);\
    do\
      if ! [ -e $$f.dist.$(DIST) ];then echo $$f;fi;\
      done\
  )

RPM_CONTENT_OUT := $(subst .dist.$(DIST),,\
  $(addprefix $(BUILD_DIR)/rpm.$(DIST)/SOURCES/, \
    $(subst rpm/,,$(RPM_CONTENT_IN))\
  )\
)

ifneq ("$(wildcard rpm/component.spec.dist.$(DIST))","")
RPM_SPEC_IN := rpm/component.spec.dist.$(DIST)
else
RPM_SPEC_IN := rpm/component.spec
endif

# Create the various rpmbuild directories
$(RPM_DIR): | $(BUILD_DIR)/rpm.$(DIST) $(DIRECTORIES)
	mkdir $@
	mkdir -p $(INDIVIDUAL_RPM_LOCAL_REPO_PATH)

# Copy the upstream sources archive to SOURCES with correct name
$(RPM_ARCHIVE): $(SOURCE_ARCHIVE) | $(RPM_DIR)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SOURCES
	rm -f $(RPM_ARCHIVE)
	cp -r $(SOURCE_ARCHIVE) $(RPM_ARCHIVE)

# Copy the additional content of the rpm/ directory
# in SOURCES (use for stuff like .service files)
$(RPM_CONTENT_OUT): $(RPM_CONTENT_IN) $(RPM_SPEC)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SOURCES
	f=rpm/$(subst $(BUILD_DIR)/rpm.$(DIST)/SOURCES/,,$@);\
	if [ -e $$f.dist.$(DIST) ];\
	then\
	    cp -r $$f.dist.$(DIST) $@;\
	else\
	    cp -r $$f $@;\
	fi


# Copy the spec file and do the various substitutions in it
$(RPM_SPEC): $(RPM_SPEC_IN) Makefile
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SPEC
	cp $(RPM_SPEC_IN) $(RPM_SPEC)
	sed -i 's|@NAME@|$(PKGNAME)|'            $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@LICENSE@|$(LICENSE)|'         $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@VERSION@|$(VERSION)|'         $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@RELEASE@|$(RELEASE)|'         $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@DESCRIPTION@|$(DESCRIPTION)|' $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@SUMMARY@|$(SUMMARY)|'         $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@URL@|$(URL)|'                 $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@MAINTAINER@|$(MAINTAINER)|'   $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)
	sed -i 's|@MAINTAINER_EMAIL@|$(MAINTAINER_EMAIL)|' \
	    $(RPM_SPEC) || (rm -f $(RPM_SPEC); exit 1)


# Build the rpm(s) and put the result inside out directories
$(BUILD_DIR)/pkg_built.rpm.$(DIST): $(SOURCE_ARCHIVE) $(RPM_ARCHIVE) $(RPM_SPEC) $(RPM_CONTENT_OUT)
	rpmbuild -ba --define "_topdir $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)" \
                                --define "_sourcedir %{_topdir}/SOURCES" \
                                --define "_specdir %{_topdir}/SPEC" \
                                --define "_rpmdir %{_topdir}/RPMS" \
                                --define "_srcrpmdir %{_topdir}/SRPMS" \
                                --define "_tmppath %{_topdir}/BUILDROOT" \
                                --define "_builddir %{_topdir}/BUILD" \
                                --define "dist .$(PKG_ORG)+$(DIST_CODE)$(DIST_TAG)" \
                                $(BUILD_DIR)/rpm.$(DIST)/SPEC/$(PKGNAME).spec
	find $(BUILD_DIR)/rpm.$(DIST) -type f -name "*.src.rpm" -print0 | xargs -i -n 1 -0 mv {} $(OUT_SRC)/
	find $(BUILD_DIR)/rpm.$(DIST) -type f -name "*.rpm" -print0 | xargs -i -n 1 -0 mv {} $(OUT_DIR)/
	touch $(BUILD_DIR)/pkg_built.rpm.$(DIST)

# Build the srpm(s) and put the result inside out directories
$(BUILD_DIR)/pkg_built.src.rpm.$(DIST): $(SOURCE_ARCHIVE) $(RPM_ARCHIVE) $(RPM_SPEC) $(RPM_CONTENT_OUT)
	rpmbuild -bs --define "_topdir $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)" \
                                --define "_sourcedir %{_topdir}/SOURCES" \
                                --define "_specdir %{_topdir}/SPEC" \
                                --define "_rpmdir %{_topdir}/RPMS" \
                                --define "_srcrpmdir %{_topdir}/SRPMS" \
                                --define "_tmppath %{_topdir}/BUILDROOT" \
                                --define "_builddir %{_topdir}/BUILD" \
                                --define "dist .$(PKG_ORG)+$(DIST_CODE)$(DIST_TAG)" \
                                $(BUILD_DIR)/rpm.$(DIST)/SPEC/$(PKGNAME).spec
	touch $(BUILD_DIR)/pkg_built.src.rpm.$(DIST)

$(BUILD_DIR)/pkg_built_chroot.rpm.$(DIST): $(BUILD_DIR)/pkg_built.src.rpm.$(DIST)
	$(MOCK_CMD);\
	if [ $$? -ne 0 ];\
		then touch $(BUILD_DIR)/failure.rpm.chroot.$(DIST);exit 1;\
		else rm -f $(BUILD_DIR)/failure.rpm.chroot.$(DIST);\
	fi
	find $(INDIVIDUAL_RPM_LOCAL_REPO_PATH)/results/$(DIST_FULL)-$(ARCH)/`rpm -qp $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)/SRPMS/*$(VERSION)-$(RELEASE)*.rpm \
		--queryformat "%{NAME}-%{VERSION}-%{RELEASE}"` \
		-type f -name "*$(DIST)*.rpm" -not -name "*.src.rpm" -print0 | \
		xargs -i -n 1 -0 ln -f {} $(OUT_DIR)/
	touch $(BUILD_DIR)/pkg_built_chroot.rpm.$(DIST)
	touch $(BUILD_DIR)/pkg_built.src.rpm.$(DIST).internal

ifneq ($(TO_SKIP), true)
rpm_src_internal: $(BUILD_DIR)/pkg_built.src.rpm.$(DIST).internal

$(BUILD_DIR)/pkg_built.src.rpm.$(DIST).internal: $(BUILD_DIR)/pkg_built.src.rpm.$(DIST)
rpm_chroot: $(BUILD_DIR)/pkg_built_chroot.rpm.$(DIST)

# The rpm target to be called
rpm: $(BUILD_DIR)/pkg_built.rpm.$(DIST)
else
rpm:
rpm_chroot:
endif

#### END RPM targets

#### START help target ####

define MAKE_HELP
Available targets:

* help       : Display this help


* manifest   : Download the upstream sources
               and (re)build the MANIFEST file
               with the checksum of the upstream sources.

               Running "make clean" is advisable before running
               "make manifest".


* clean      : Remove various work directories:
               - builddir/ (build directory),
               - cache/ (upstream sources cache directory),
               - out/ (output directory for packages),
               - src-out/ (output directory for source packages)

               It's possible to keep the cache directory
               with "KEEP_CACHE=true": "make clean KEEP_CACHE=true"


* deb        : Build the .deb packages


* rpm        : Build the .rpm packages


* deb_chroot : Build the .deb packages in a clean chroot (using cowbuilder)

               The targeted distribution version can be specified using
               the "DIST=<code name>", for example "make deb_chroot DIST=stretch"

               this target requires root permission for cowbuilder
               (sudo or run directly as root)


* rpm_chroot : Build the .rpm packages in a clean chroot (using mock) 

               The targeted distribution version can be specified using
               the "DIST=<code name>", for example "make rpm_chroot DIST=el7"

               this target requires root permission for mock
               (sudo or run directly as root)

* list_dist  : List distribution code names  

endef

export MAKE_HELP
help:
	@echo "$$MAKE_HELP"

#### END help target ####
