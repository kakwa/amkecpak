# vim: set noet ts=4:

# define global build and output directories

OUT_DIR = out
OUT_SRC = src-out
BUILD_DIR = builddir
CACHE=cache
DEB_MIRROR=http://ftp.debian.org/debian/

DIST_TAG=$(shell ./buildenv/get_dist.sh)

PKGNAME=$(NAME)

MANIFEST_FILE=$(shell pwd)/MANIFEST
CACHE_DIR=$(shell pwd)/$(CACHE)/
ifeq ($(MAKECMDGOALS), manifest)
WGS=./buildenv/wget_sum.sh -c -m $(MANIFEST_FILE) -C "$(CACHE_DIR)"
else
WGS=./buildenv/wget_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)"
endif

ifeq ($(MAKECMDGOALS), manifest)
GS=./buildenv/git_sum.sh -c -m $(MANIFEST_FILE) -C "$(CACHE_DIR)"
else
GS=./buildenv/git_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)"
endif

COWDUILDER_DIR=/var/cache/pbuilder/
ifeq ("$(DIST)", "")
DIST=unknown
else
COWBUILDER_DIST=--distribution $(DIST_OS)
endif

ifeq ($(shell id -u), 1)
  SUDO=
else
  SUDO=sudo
endif

DIST_OS=$(shell echo $(DIST) | sed 's/-backports//')
COW_NAME=$(DIST).cow
DIST_TAG=$(shell ./buildenv/get_dist.sh $(DIST_OS))

ifneq ("$(DIST)", "sid")
OTHERMIRROR=--othermirror "deb $(DEB_MIRROR) $(DIST_OS)-backports main"
endif

.NOTPARALLEL: deb rpm clean deb_chroot manifest

.PHONY: all rpm_prepare rpm deb clean_build clean_cache clean rm_manifest_file manifest deb_chroot

# Name of the root directory of the archive
SOURCE_DIR=$(BUILD_DIR)/$(PKGNAME)-$(VERSION)
# Name of the source archive
SOURCE_ARCHIVE=$(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz
# Command used to build the source archive
SOURCE_TAR_CMD=cd `dirname $(SOURCE_DIR)` && tar -zcf $(PKGNAME)_$(VERSION).orig.tar.gz `basename $(SOURCE_DIR)` --owner=root --group=root && rm -r `basename $(SOURCE_DIR)`/* || rm -f $(PKGNAME)_$(VERSION).orig.tar.gz; touch $(PKGNAME)_$(VERSION).orig.tar.gz

# Some targets
DIRECTORIES=$(BUILD_DIR) $(OUT_DIR) $(OUT_SRC) $(CACHE) $(BUILD_DIR)/deb.$(DIST) $(SOURCE_DIR) $(BUILD_DIR)/rpm.$(DIST)
DEB_CONTENT=$(BUILD_DIR)/debian/changelog $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz
DEB_CONTENT_IN=$(filter-out debian/changelog debian/control debian/rules, $(wildcard debian/*))
DEB_CONTENT_OUT=$(addprefix $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/, $(DEB_CONTENT_IN))
DEB_PREPARE=$(DIRECTORIES) $(DEB_ARCHIVE) $(DEB_CONTENT_OUT) $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/changelog $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/control $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/rules


#### START common targets

all: deb rpm

# Create the build directories
$(DIRECTORIES):
	mkdir -p $(BUILD_DIR)
	mkdir -p  $(OUT_DIR)
	mkdir -p  $(OUT_SRC)
	mkdir -p  $(CACHE)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)
	mkdir -p $(SOURCE_DIR)

# Cleaning targets
clean_build:
	if [ -d $(BUILD_DIR) ]; then chmod 700 -R $(BUILD_DIR);rm -rf $(BUILD_DIR);fi

clean_cache:
	if [ -d $(CACHE) ] && ! [ "$(KEEP_CACHE)" = "true" ]; then chmod 700 -R $(CACHE); rm -rf $(CACHE);fi

clean: clean_build clean_cache
	if [ -d $(OUT_DIR) ]; then chmod 700 -R $(OUT_DIR);rm -rf $(OUT_DIR);fi
	if [ -d $(OUT_SRC) ]; then chmod 700 -R $(OUT_SRC);rm -rf $(OUT_SRC);fi

# Build MANIFEST target
rm_manifest_file:
	if [ -f $(MANIFEST_FILE) ]; then  rm $(MANIFEST_FILE);fi
	touch MANIFEST

manifest: rm_manifest_file clean_cache $(SOURCE_ARCHIVE)

#### END common targets

#### START DEB targets

# Copy all the files of debian/ packaging directory
$(DEB_CONTENT_OUT): $(DEB_CONTENT_IN)
	mkdir -p $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/
	cp -r $(subst $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/,,$@) $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/

# Substitute version and package name in control file
$(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/control $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/rules: ./debian/control debian/rules
	cp -r $(subst $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/,,$@) $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/
	sed -i 's|@NAME@|$(PKGNAME)|;s|@VERSION@|$(VERSION)|;s|@RELEASE@|$(RELEASE)|;s|@DESCRIPTION@|$(DESCRIPTION)|;s|@SUMMARY@|$(SUMMARY)|;s|@URL@|$(URL)|' $@

# Generate generic changelog
$(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian/changelog: ./debian/changelog
	mkdir -p $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION)/debian
	printf "$(PKGNAME) ($(VERSION)-$(RELEASE)~up+deb$(DIST_TAG)) $(DIST); urgency=low\\n"  > $@
	printf "\\n  * New version\\n\\n" >> $@
	printf " -- kakwa <carpentier.pf@gmail.com>  %s\\n" "`LANG=C date '+%a, %d %b %Y %T %z'`" >> $@

DEB_ARCHIVE=$(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)_$(VERSION).orig.tar.gz

$(DEB_ARCHIVE): $(SOURCE_ARCHIVE)
	cp $(SOURCE_ARCHIVE) $(DEB_ARCHIVE)

# Build the deb(s) and put it in out directory
$(BUILD_DIR)/pkg_built.deb.$(DIST): $(DEB_PREPARE)
	tar -xf $(DEB_ARCHIVE) -C $(BUILD_DIR)/deb.$(DIST)
	cd $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION) && \
	dpkg-buildpackage -us -uc;\
	if [ $$? -ne 0 ];\
		then touch $(BUILD_DIR)/failure;exit 1;\
		else rm -f $(BUILD_DIR)/failure;exit 0;\
	fi
	find $(BUILD_DIR)/ -type f -name "*.deb" -exec mv {} $(OUT_DIR)/ \;
	find $(BUILD_DIR)/ -type f -name "*.orig.tar.gz" -exec cp {} $(OUT_SRC)/ \;
	find $(BUILD_DIR)/ -type f -name "*.dsc" -exec mv {} $(OUT_SRC)/ \;
	find $(BUILD_DIR)/ -type f -name "*debian.tar.xz" -exec mv {} $(OUT_SRC)/ \;
	touch $(BUILD_DIR)/pkg_built.deb.$(DIST)

deb: $(BUILD_DIR)/pkg_built.deb.$(DIST)

# Build the deb(s) in a chroot and put it in out directory
$(BUILD_DIR)/pkg_built_chroot.deb.$(DIST): $(DEB_PREPARE)
	cd $(BUILD_DIR)/deb.$(DIST)/$(PKGNAME)-$(VERSION) && \
	     dpkg-source -b ./
	if ! [ -e $(COWDUILDER_DIR)/$(COW_NAME) ];\
	then\
	    export TMPDIR=/tmp/; $(SUDO) cowbuilder create --debootstrap debootstrap $(COWBUILDER_DIST) $(OTHERMIRROR) --basepath $(COWDUILDER_DIR)/$(COW_NAME) --mirror $(DEB_MIRROR);\
	else\
	    export TMPDIR=/tmp/; $(SUDO) cowbuilder update --basepath $(COWDUILDER_DIR)/$(COW_NAME);\
	fi
	export TMPDIR=/tmp/; $(SUDO) cowbuilder build $(BUILD_DIR)/deb.$(DIST)/*.dsc  --basepath $(COWDUILDER_DIR)/$(COW_NAME) --buildresult $(OUT_DIR)/ $(OTHERMIRROR) --mirror $(DEB_MIRROR); \
	if [ $$? -ne 0 ];\
		then touch $(BUILD_DIR)/failure;exit 1;\
		else rm -f $(BUILD_DIR)/failure;exit 0;\
	fi
	find $(OUT_DIR)/ -type f -name "*.orig.tar.gz" -exec mv {} $(OUT_SRC)/ \;
	find $(OUT_DIR)/ -type f -name "*.dsc" -exec mv {} $(OUT_SRC)/ \;
	find $(OUT_DIR)/ -type f -name "*.changes" -exec mv {} $(OUT_SRC)/ \;
	find $(OUT_DIR)/ -type f -name "*.buildinfo" -exec mv {} $(OUT_SRC)/ \;
	find $(OUT_DIR)/ -type f -name "*debian.tar.xz" -exec mv {} $(OUT_SRC)/ \;
	touch $(BUILD_DIR)/pkg_built_chroot.deb.$(DIST)

deb_chroot: $(BUILD_DIR)/pkg_built_chroot.deb.$(DIST)

#### END DEB targets

#### START RPM targets

# * prepare the sub-directories for rpmbuild
# * create the tar.gz source archive and put it in SOURCES directory
# * clean unwanted directory
# * substitute version and package name in spec file

RPM_DIR=$(BUILD_DIR)/rpm.$(DIST)/BUILDROOT $(BUILD_DIR)/rpm.$(DIST)/RPMS  $(BUILD_DIR)/rpm.$(DIST)/SRPMS 

RPM_SPEC=$(BUILD_DIR)/rpm.$(DIST)/SPEC/$(PKGNAME).spec

RPM_ARCHIVE=$(BUILD_DIR)/rpm.$(DIST)/SOURCES/$(PKGNAME)-$(VERSION).tar.gz

RPM_CONTENT_IN=$(filter-out rpm/component.spec, $(wildcard rpm/*))

RPM_CONTENT_OUT=$(addprefix $(BUILD_DIR)/rpm.$(DIST)/SOURCES/, $(subst rpm/,,$(RPM_CONTENT_IN)))


$(RPM_DIR): $(BUILD_DIR)/rpm.$(DIST) 
	mkdir $@

$(RPM_ARCHIVE): $(SOURCE_ARCHIVE)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SOURCES
	rm -f $(RPM_ARCHIVE)
	cp -r $(SOURCE_ARCHIVE) $(RPM_ARCHIVE)

$(RPM_CONTENT_OUT): $(RPM_CONTENT_IN) $(RPM_SPEC)
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SOURCES
	cp -r rpm/$(subst $(BUILD_DIR)/rpm.$(DIST)/SOURCES/,,$@) $(BUILD_DIR)/rpm.$(DIST)/SOURCES



$(RPM_SPEC): rpm/component.spec
	mkdir -p $(BUILD_DIR)/rpm.$(DIST)/SPEC
	cp rpm/component.spec $(RPM_SPEC)
	sed -i 's|@NAME@|$(PKGNAME)|;s|@VERSION@|$(VERSION)|;s|@RELEASE@|$(RELEASE)|;s|@DESCRIPTION@|$(DESCRIPTION)|;s|@SUMMARY|$(SUMMARY)|;s|@URL@|$(URL)|' \
		$(RPM_SPEC) || rm -f $(RPM_SPEC)

# build the rpm(s) and put the result inside OUT directory
$(BUILD_DIR)/pkg_built.rpm.$(DIST): $(SOURCE_ARCHIVE) $(RPM_ARCHIVE) $(RPM_SPEC) $(RPM_CONTENT_OUT)
	rpmbuild -ba --define "_topdir $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)" \
                                --define "_sourcedir %{_topdir}/SOURCES" \
                                --define "_specdir %{_topdir}/SPEC" \
                                --define "_rpmdir %{_topdir}/RPMS" \
                                --define "_srcrpmdir %{_topdir}/SRPMS" \
                                --define "_tmppath %{_topdir}/BUILDROOT" \
                                --define "_builddir %{_topdir}/BUILD" \
                                --define "dist .$(DIST_TAG)" \
                                $(BUILD_DIR)/rpm.$(DIST)/SPEC/$(PKGNAME).spec
	find $(BUILD_DIR)/rpm.$(DIST) -type f -name "*.src.rpm" -exec mv {} $(OUT_SRC)/ \;
	find $(BUILD_DIR)/rpm.$(DIST) -type f -name "*.rpm" -exec mv {} $(OUT_DIR)/ \;
	touch $(BUILD_DIR)/pkg_built.rpm.$(DIST)

rpm: $(BUILD_DIR)/pkg_built.rpm.$(DIST)
#### END RPM targets
