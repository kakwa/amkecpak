--- modules/setting/setting.go	2020-05-09 21:26:27.000000000 +0200
+++ modules/setting/setting.go	2020-05-11 20:50:40.366967659 +0200
@@ -499,7 +499,7 @@
 		CustomPath = providedCustom
 	}
 	if len(CustomPath) == 0 {
-		CustomPath = path.Join(AppWorkPath, "custom")
+                CustomPath = "/var/lib/gitea/custom"
 	} else if !filepath.IsAbs(CustomPath) {
 		CustomPath = path.Join(AppWorkPath, CustomPath)
 	}
@@ -508,7 +508,7 @@
 		CustomConf = providedConf
 	}
 	if len(CustomConf) == 0 {
-		CustomConf = path.Join(CustomPath, "conf/app.ini")
+               CustomConf = "/etc/gitea/gitea.ini"
 	} else if !filepath.IsAbs(CustomConf) {
 		CustomConf = path.Join(CustomPath, CustomConf)
 	}
@@ -540,7 +540,7 @@
 
 	LogLevel = getLogLevel(Cfg.Section("log"), "LEVEL", "Info")
 	StacktraceLogLevel = getStacktraceLogLevel(Cfg.Section("log"), "STACKTRACE_LEVEL", "None")
-	LogRootPath = Cfg.Section("log").Key("ROOT_PATH").MustString(path.Join(AppWorkPath, "log"))
+	LogRootPath = Cfg.Section("log").Key("ROOT_PATH").MustString("/var/log/gitea/")
 	forcePathSeparator(LogRootPath)
 	RedirectMacaronLog = Cfg.Section("log").Key("REDIRECT_MACARON_LOG").MustBool(false)
 	RouterLogLevel = log.FromString(Cfg.Section("log").Key("ROUTER_LOG_LEVEL").MustString("Info"))
@@ -640,12 +640,12 @@
 	PortToRedirect = sec.Key("PORT_TO_REDIRECT").MustString("80")
 	OfflineMode = sec.Key("OFFLINE_MODE").MustBool()
 	DisableRouterLog = sec.Key("DISABLE_ROUTER_LOG").MustBool()
-	StaticRootPath = sec.Key("STATIC_ROOT_PATH").MustString(AppWorkPath)
+	StaticRootPath = sec.Key("STATIC_ROOT_PATH").MustString("/usr/share/gitea/")
 	StaticCacheTime = sec.Key("STATIC_CACHE_TIME").MustDuration(6 * time.Hour)
-	AppDataPath = sec.Key("APP_DATA_PATH").MustString(path.Join(AppWorkPath, "data"))
+	AppDataPath = sec.Key("APP_DATA_PATH").MustString("/var/lib/gitea/data/")
 	EnableGzip = sec.Key("ENABLE_GZIP").MustBool()
 	EnablePprof = sec.Key("ENABLE_PPROF").MustBool(false)
-	PprofDataPath = sec.Key("PPROF_DATA_PATH").MustString(path.Join(AppWorkPath, "data/tmp/pprof"))
+	PprofDataPath = sec.Key("PPROF_DATA_PATH").MustString("/var/lib/gitea/data/")
 	if !filepath.IsAbs(PprofDataPath) {
 		PprofDataPath = filepath.Join(AppWorkPath, PprofDataPath)
 	}
@@ -714,7 +714,7 @@
 	if err = sec.MapTo(&LFS); err != nil {
 		log.Fatal("Failed to map LFS settings: %v", err)
 	}
-	LFS.ContentPath = sec.Key("LFS_CONTENT_PATH").MustString(filepath.Join(AppDataPath, "lfs"))
+	LFS.ContentPath = sec.Key("LFS_CONTENT_PATH").MustString("/var/lib/gitea/data/lfs")
 	if !filepath.IsAbs(LFS.ContentPath) {
 		LFS.ContentPath = filepath.Join(AppWorkPath, LFS.ContentPath)
 	}
@@ -822,7 +822,7 @@
 	}
 
 	sec = Cfg.Section("attachment")
-	AttachmentPath = sec.Key("PATH").MustString(path.Join(AppDataPath, "attachments"))
+	AttachmentPath = sec.Key("PATH").MustString("/var/lib/gitea/data/attachments")
 	if !filepath.IsAbs(AttachmentPath) {
 		AttachmentPath = path.Join(AppWorkPath, AttachmentPath)
 	}
@@ -889,7 +889,7 @@
 	newRepository()
 
 	sec = Cfg.Section("picture")
-	AvatarUploadPath = sec.Key("AVATAR_UPLOAD_PATH").MustString(path.Join(AppDataPath, "avatars"))
+	AvatarUploadPath = sec.Key("AVATAR_UPLOAD_PATH").MustString("/var/lib/gitea/data/avatars")
 	forcePathSeparator(AvatarUploadPath)
 	if !filepath.IsAbs(AvatarUploadPath) {
 		AvatarUploadPath = path.Join(AppWorkPath, AvatarUploadPath)
